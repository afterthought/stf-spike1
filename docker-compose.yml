version: '3.7'

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: minio/minio:RELEASE.2021-07-15T22-27-34Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: minio123
    MINIO_NOTIFY_WEBHOOK_ENABLE_SPIKE1: "on"
    MINIO_NOTIFY_WEBHOOK_ENDPOINT_SPIKE1: http://mock:80/post
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4

  createbuckets:
    image: minio/mc
    depends_on:
      - nginx
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://nginx:9000 minio minio123;
      /usr/bin/mc rm -r --force myminio/stfbucket1;
      /usr/bin/mc mb myminio/stfbucket1;
      /usr/bin/mc event add myminio/stfbucket1 arn:minio:sqs::SPIKE1:webhook;
      /usr/bin/mc policy download myminio/stfbucket1;
      exit 0;
      "
  s3-proxy:
    image: dalongrong/s3-sftp-proxy
    command: -debug
    ports: 
    - "10022:10022"
    volumes: 
    - "./host_key:/app/host_key"
    - "./s3-sftp-proxy.example.toml:/app/s3-sftp-proxy.example.toml"
 
  mock:
    image: kennethreitz/httpbin
    ports:
      - "80:80"
    environment:
      - GUNICORN_CMD_ARGS=${GUNICORN_CMD_ARGS}
  kdb:
    build:
      context: dockerfiles/kdb/
    ports:
      - "5000:5000"
    volumes:
      - ./data:/root/data
    environment:
      ON_STARTUP: |
        / Read the .csv file from attached `data` volume
        fisher_river:("df";enlist",") 0: `$$"data/fisher_river_temperatures.csv"
        -1"Fisher River data set was successfuly loaded into 'fisher_river' table.";

## By default this config uses default local driver,
## For custom volumes replace with volume driver configuration.
volumes:
  kdb:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2: